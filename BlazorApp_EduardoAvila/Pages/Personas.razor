@page "/personas"
@inject HttpClient Http
@using BlazorApp_EduardoAvila.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text

<h3>Personas</h3>

<h4>@(editando ? "Editar Persona" : "Agregar Nueva Persona")</h4>

<!-- Formulario para crear o editar una persona -->
<EditForm Model="nuevaPersona" OnValidSubmit="GuardarPersona">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="nuevaPersona.Nombre" />
    </div>
    <div class="mb-3">
        <label class="form-label">Apellido Paterno</label>
        <InputText class="form-control" @bind-Value="nuevaPersona.ApellidoPaterno" />
    </div>
    <div class="mb-3">
        <label class="form-label">Apellido Materno</label>
        <InputText class="form-control" @bind-Value="nuevaPersona.ApellidoMaterno" />
    </div>
    <div class="mb-3">
        <label class="form-label">Fecha de Nacimiento</label>
        <InputDate class="form-control" @bind-Value="nuevaPersona.FechaNacimiento" />
    </div>
    <div class="mb-3">
        <label class="form-label">Sexo (M o F)</label>
        <InputText class="form-control" @bind-Value="nuevaPersona.Sexo" />
    </div>

    <button type="submit" class="btn btn-primary">@((editando ? "Actualizar" : "Agregar"))</button>
    @if (editando)
    {
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarEdicion">Cancelar</button>
    }
</EditForm>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @errorMessage
    </div>
}

<hr />

@if (personas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <!-- Filtros avanzados -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Buscar persona:</label>
            <input type="text" class="form-control" @bind="filtro" @bind:event="oninput" placeholder="Nombre o apellidos..." />
        </div>
        <div class="col-md-2">
            <label class="form-label">Sexo:</label>
            <select class="form-select" @bind="filtroSexo">
                <option value="">Todos</option>
                <option value="M">Masculino</option>
                <option value="F">Femenino</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Desde:</label>
            <InputDate class="form-control" @bind-Value="filtroDesde" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Hasta:</label>
            <InputDate class="form-control" @bind-Value="filtroHasta" />
        </div>
    </div>

    <!-- Tabla de resultados -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido Paterno</th>
                <th>Apellido Materno</th>
                <th>Fecha Nacimiento</th>
                <th>Sexo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in ObtenerPaginaActual())
            {
                <tr>
                    <td>@persona.Id</td>
                    <td>@persona.Nombre</td>
                    <td>@persona.ApellidoPaterno</td>
                    <td>@persona.ApellidoMaterno</td>
                    <td>@persona.FechaNacimiento.ToShortDateString()</td>
                    <td>@persona.Sexo</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarPersona(persona)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarPersona(persona.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Controles de paginación -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-secondary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">Anterior</button>
        <span>Página @paginaActual de @TotalPaginas</span>
        <button class="btn btn-outline-secondary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente</button>
    </div>
}

@code {
    // Datos
    private List<Persona>? personas;
    private Persona nuevaPersona = new Persona();
    private bool editando = false;
    private string errorMessage = "";
    private string filtro = "";
    private string filtroSexo = "";
    private DateTime? filtroDesde = null;
    private DateTime? filtroHasta = null;

    // Paginación
    private int paginaActual = 1;
    private int personasPorPagina = 5;
    private int TotalPaginas => (int)Math.Ceiling(FiltrarPersonas().Count() / (double)personasPorPagina);
    private bool PuedeRetroceder => paginaActual > 1;
    private bool PuedeAvanzar => paginaActual < TotalPaginas;

    // Inicializa y carga datos
    protected override async Task OnInitializedAsync()
    {
        personas = await Http.GetFromJsonAsync<List<Persona>>("api/personas");
    }

    // Filtrado por texto, sexo y fechas
    private IEnumerable<Persona> FiltrarPersonas()
    {
        var lista = personas ?? new List<Persona>();

        if (!string.IsNullOrWhiteSpace(filtro))
        {
            string filtroNormalizado = RemoverAcentos(filtro).ToLower();
            lista = lista.Where(p =>
                RemoverAcentos(p.Nombre).ToLower().Contains(filtroNormalizado) ||
                RemoverAcentos(p.ApellidoPaterno).ToLower().Contains(filtroNormalizado) ||
                RemoverAcentos(p.ApellidoMaterno).ToLower().Contains(filtroNormalizado)).ToList();
        }

        if (!string.IsNullOrWhiteSpace(filtroSexo))
        {
            lista = lista.Where(p => p.Sexo.Equals(filtroSexo, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (filtroDesde != null)
        {
            lista = lista.Where(p => p.FechaNacimiento >= filtroDesde).ToList();
        }

        if (filtroHasta != null)
        {
            lista = lista.Where(p => p.FechaNacimiento <= filtroHasta).ToList();
        }

        return lista;
    }

    // Paginar datos filtrados
    private IEnumerable<Persona> ObtenerPaginaActual()
    {
        var listaFiltrada = FiltrarPersonas().ToList();
        if (paginaActual > TotalPaginas)
            paginaActual = TotalPaginas;
        if (paginaActual < 1)
            paginaActual = 1;
        return listaFiltrada.Skip((paginaActual - 1) * personasPorPagina).Take(personasPorPagina);
    }

    private void PaginaAnterior() => paginaActual--;
    private void PaginaSiguiente() => paginaActual++;

    // Quitar acentos para búsqueda más flexible
    private string RemoverAcentos(string texto)
    {
        var normalizado = texto.Normalize(NormalizationForm.FormD);
        var sinAcentos = new string(normalizado
            .Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
            .ToArray());
        return sinAcentos.Normalize(NormalizationForm.FormC);
    }

    // Crear o actualizar persona
    private async Task GuardarPersona()
    {
        errorMessage = "";
        try
        {
            if (editando)
            {
                var response = await Http.PutAsJsonAsync($"api/personas/{nuevaPersona.Id}", nuevaPersona);
                if (response.IsSuccessStatusCode)
                {
                    var index = personas?.FindIndex(p => p.Id == nuevaPersona.Id);
                    if (index >= 0 && personas != null)
                        personas[index.Value] = nuevaPersona;
                    CancelarEdicion();
                }
                else
                {
                    errorMessage = "Error al actualizar la persona.";
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("api/personas", nuevaPersona);
                if (response.IsSuccessStatusCode)
                {
                    var personaAgregada = await response.Content.ReadFromJsonAsync<Persona>();
                    personas?.Add(personaAgregada!);
                    nuevaPersona = new Persona();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = "Error al agregar la persona.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de red: {ex.Message}";
        }
    }

    // Preparar datos para edición
    private void EditarPersona(Persona persona)
    {
        nuevaPersona = new Persona
        {
            Id = persona.Id,
            Nombre = persona.Nombre,
            ApellidoPaterno = persona.ApellidoPaterno,
            ApellidoMaterno = persona.ApellidoMaterno,
            FechaNacimiento = persona.FechaNacimiento,
            Sexo = persona.Sexo
        };
        editando = true;
        errorMessage = "";
    }

    private void CancelarEdicion()
    {
        nuevaPersona = new Persona();
        editando = false;
        errorMessage = "";
    }

    // Eliminar persona por ID
    private async Task EliminarPersona(int id)
    {
        errorMessage = "";
        try
        {
            var confirm = await Http.DeleteAsync($"api/personas/{id}");
            if (confirm.IsSuccessStatusCode)
            {
                var persona = personas?.FirstOrDefault(p => p.Id == id);
                if (persona != null)
                    personas?.Remove(persona);
            }
            else
            {
                errorMessage = "Error al eliminar la persona.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de red: {ex.Message}";
        }
    }

    // Modelo de Persona con validaciones
    public class Persona
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [StringLength(50, ErrorMessage = "Máximo 50 caracteres.")]
        [RegularExpression(@"^[A-Za-zÁÉÍÓÚáéíóúÑñ\s'-]+$", ErrorMessage = "Solo se permiten letras, espacios y guiones.")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "El apellido paterno es obligatorio.")]
        [StringLength(50)]
        [RegularExpression(@"^[A-Za-zÁÉÍÓÚáéíóúÑñ\s'-]+$", ErrorMessage = "Solo se permiten letras, espacios y guiones.")]
        public string ApellidoPaterno { get; set; } = "";

        [StringLength(50)]
        [RegularExpression(@"^[A-Za-zÁÉÍÓÚáéíóúÑñ\s'-]*$", ErrorMessage = "Solo se permiten letras, espacios y guiones.")]
        public string ApellidoMaterno { get; set; } = "";

        [Required(ErrorMessage = "La fecha de nacimiento es obligatoria.")]
        [CustomValidation(typeof(Persona), nameof(ValidarFechaNacimiento))]
        public DateTime FechaNacimiento { get; set; }

        [Required(ErrorMessage = "El sexo es obligatorio.")]
        [RegularExpression("^[MFmf]$", ErrorMessage = "El sexo debe ser 'M' o 'F'.")]
        public string Sexo { get; set; } = "";

        public static ValidationResult? ValidarFechaNacimiento(DateTime fecha, ValidationContext context)
        {
            if (fecha > DateTime.Today)
                return new ValidationResult("La fecha no puede ser en el futuro.");
            if (fecha.Year < 1900)
                return new ValidationResult("La fecha no puede ser anterior a 1900.");
            return ValidationResult.Success;
        }
    }
}
